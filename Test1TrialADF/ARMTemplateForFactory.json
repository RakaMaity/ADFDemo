{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Test1TrialADF"
		},
		"LinkedServiceTest1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LinkedServiceTest1'"
		},
		"LinkedServiceTest2SelfHost_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LinkedServiceTest2SelfHost'"
		},
		"LinkedService_SQL_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'LinkedService_SQL'"
		},
		"LinkedServiceSQL_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "@{linkedService().servername}"
		},
		"LinkedServiceSQL_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "@{linkedService().dbName}"
		},
		"LinkedServiceSQL_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "@{linkedService().username}"
		},
		"LinkedService_SQL_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "azureadfraka.database.windows.net"
		},
		"LinkedService_SQL_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "azure-ADF-practice"
		},
		"LinkedService_SQL_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "SQLDBADF"
		},
		"EventTriggerVariables_properties_pipeline1variables_parameters_FileName": {
			"type": "string",
			"defaultValue": "@triggerBody().fileName"
		},
		"EventTriggerVariables_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/4d203d9f-5fcc-460b-bfcb-e6d413307f8d/resourceGroups/Test1ResourceGrp/providers/Microsoft.Storage/storageAccounts/test1resourcegrp"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/MasterPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Master-Slave",
				"activities": [
					{
						"name": "Master",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pipelineSQLParam",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"serverNameFromPipeline": {
									"value": "@pipeline().parameters.serverName",
									"type": "Expression"
								},
								"dbNameFromPipeline": {
									"value": "@pipeline().parameters.dbName",
									"type": "Expression"
								},
								"userNameFromPipeline": {
									"value": "@pipeline().parameters.userName",
									"type": "Expression"
								},
								"passwordFromPipeline": {
									"value": "@pipeline().parameters.Password",
									"type": "Expression"
								},
								"sourceTableNameFromPipeline": {
									"value": "@pipeline().parameters.SourceTable",
									"type": "Expression"
								},
								"destinationTableNameFromPipeline": {
									"value": "@pipeline().parameters.DestTable",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"serverName": {
						"type": "string"
					},
					"dbName": {
						"type": "string"
					},
					"userName": {
						"type": "string"
					},
					"Password": {
						"type": "string"
					},
					"SourceTable": {
						"type": "string"
					},
					"DestTable": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-29T16:38:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pipelineSQLParam')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Test1Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DataSetTest1Input",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DataSetTest1Output",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-28T17:29:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataSetTest1Input')]",
				"[concat(variables('factoryId'), '/datasets/DataSetTest1Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1CSVcopy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "test1containerrg/input/dataCopy.csv"
							},
							{
								"name": "Destination",
								"value": "test1containerrg/output/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Raka",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Raka",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Female",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "32",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "32",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Female",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "TCS",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Kolkata",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Kolkata",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TCS",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedTextInput",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-28T18:45:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedTextInput')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedTextOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1variables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FileName",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "FileName",
							"value": {
								"value": "@replace(pipeline().parameters.FileName,'Sales','')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If FileType is Hourly",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "FileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('FileName'),'Hourly')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy data to Daily Table",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SqlServerSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DataSetSQl",
											"type": "DatasetReference",
											"parameters": {
												"tableName": "tableNameSource",
												"serverNamefromDataset": "serverName",
												"dbNamefromDataset": "dbName",
												"UserNamefromDataset": "User",
												"passwordfromDataset": "Pass"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DataSetSQl",
											"type": "DatasetReference",
											"parameters": {
												"tableName": "tableNameDest",
												"serverNamefromDataset": "serverName",
												"dbNamefromDataset": "dbName",
												"UserNamefromDataset": "User",
												"passwordfromDataset": "Pass"
											}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy data to Hourly Table",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SqlServerSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DataSetSQl",
											"type": "DatasetReference",
											"parameters": {
												"tableName": "tableNameSource",
												"serverNamefromDataset": "serverName",
												"dbNamefromDataset": "dbName",
												"UserNamefromDataset": "User",
												"passwordfromDataset": "Pass"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DataSetSQl",
											"type": "DatasetReference",
											"parameters": {
												"tableName": "tableNameDest",
												"serverNamefromDataset": "serverName",
												"dbNamefromDataset": "dbName",
												"UserNamefromDataset": "User",
												"passwordfromDataset": "Pass"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"variables": {
					"FileName": {
						"type": "String"
					},
					"ListOfFiles": {
						"type": "Array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-29T15:46:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataSetSQl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineAnnotation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [
					"Annotation"
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineCacheSink')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowCacheSink",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employees": {},
									"Employee": {},
									"MaxCountofEmpId": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowCacheSink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineDataFlowAggr')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowAggr",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employee": {},
									"department": {},
									"TotalEmpBasedOnDeptwithRole": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-31T09:25:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowAggr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineDataFlowConditionalSplit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DataFlowConditionalSplit",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowConditionalSplit",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Employees": {},
									"BiologyEmpSink": {},
									"PhysicsEmpSink": {},
									"LawEmpSink": {},
									"OtherEmpSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-08-01T07:52:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowConditionalSplit')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineDataFlowDerivedColumn')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowDerivedColumn",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employee": {},
									"EmpWithRegion": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-08-01T09:04:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowDerivedColumn')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineDataFlowFilter')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowFilterTrans",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employee": {},
									"FilteredEmployees": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-31T08:33:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowFilterTrans')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineDataFlowJoin')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "EmpJOINDept",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowCSVjoin",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employee": {},
									"department": {},
									"joinOutput": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-31T08:06:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowCSVjoin')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineDataFlowLookUp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowLookup",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Employee": {},
									"Department": {},
									"LookUpOutput": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-08-01T15:24:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowLookup')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineDataFlowParam')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowParameteriztn",
								"type": "DataFlowReference",
								"parameters": {
									"Dept": {
										"value": "'@{pipeline().parameters.DeprName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"employeedata": {},
									"sinkEMployeesParam": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"DeprName": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-08-02T09:10:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowParameteriztn')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineDataFlowParse')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowParse",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employee": {},
									"employeeSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowParse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineDataFlowRank')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowRank",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceEMployees": {},
									"sinkEompoyeesWithRank": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowRank')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineDataFlowSurrogateKey')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowSurrogateKey",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Employee": {},
									"sinkSurrogateKey": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-08-01T19:11:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowSurrogateKey')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineDataFlowUnion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowUnion",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BiologyEmployees": {},
									"PhysicsEmployees": {},
									"LawEmployees": {},
									"allEmployeesSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-08-01T14:17:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowUnion')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineDataFlowUnpivot')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowUnpivot",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EmployeeUnpivot": {},
									"UnpivotEmployees": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-08-01T18:52:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowUnpivot')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineDelete')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "FinalOutput",
								"value": "XLSX has been deleted"
							}
						],
						"typeProperties": {
							"dataset": {
								"referenceName": "DataSetTest1Output",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "LinkedServiceTest1",
									"type": "LinkedServiceReference"
								},
								"path": "test1containerrg"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"wildcardFileName": "*.xlsx",
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-28T18:15:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataSetTest1Output')]",
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceTest1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineFail')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_OnFail",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "errorMessage",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "errMsg",
							"value": {
								"value": "@activity('Copy data1').output.errors[0].Message",
								"type": "Expression"
							}
						}
					},
					{
						"name": "PipelineFail",
						"type": "Fail",
						"dependsOn": [
							{
								"activity": "errorMessage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"message": "Reason",
							"errorCode": "404"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"errMsg": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_OnFail')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedTextOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineFilter')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Filter1",
						"type": "Filter",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.ListOfValues",
								"type": "Expression"
							},
							"condition": {
								"value": "@greater(item(),3)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Append variable1",
						"type": "AppendVariable",
						"dependsOn": [
							{
								"activity": "Filter1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [
							{
								"name": "FinalListOfValues",
								"value": "@activity('Filter1').output"
							}
						],
						"typeProperties": {
							"variableName": "FinalListOfValues",
							"value": {
								"value": "@activity('Filter1').output",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ListOfValues": {
						"type": "array",
						"defaultValue": [
							1,
							2,
							3,
							4,
							5
						]
					}
				},
				"variables": {
					"FinalListOfValues": {
						"type": "Array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-29T16:43:10Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineForEach')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.ListofFolders",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DataSetTest1Input",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DataSetMultipleFolders",
											"type": "DatasetReference",
											"parameters": {
												"OuputFolder": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ListofFolders": {
						"type": "array",
						"defaultValue": [
							"output1",
							"output2",
							"output3"
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-29T19:39:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataSetTest1Input')]",
				"[concat(variables('factoryId'), '/datasets/DataSetMultipleFolders')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineGlobalParam')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "InputSource",
								"type": "DatasetReference",
								"parameters": {
									"inputfolder": {
										"value": "@pipeline().globalParameters.GlobalRoot",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().globalParameters.GlobalFIleName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/InputSource')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedTextOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineIfCondition')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@bool(pipeline().parameters.ConditionCheck)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy data2",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DataSetTest1Input",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "Binary1",
											"type": "DatasetReference",
											"parameters": {
												"outputFolder": {
													"value": "@pipeline().parameters.OutputFolder2",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DataSetTest1Input",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "Binary1",
											"type": "DatasetReference",
											"parameters": {
												"outputFolder": {
													"value": "@pipeline().parameters.OutputFolder1",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ConditionCheck": {
						"type": "string"
					},
					"OutputFolder1": {
						"type": "string",
						"defaultValue": "OutputFolder1"
					},
					"OutputFolder2": {
						"type": "string",
						"defaultValue": "OutputFolder2"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-30T08:34:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataSetTest1Input')]",
				"[concat(variables('factoryId'), '/datasets/Binary1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLookUp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select folderName from tableName",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DataSetSQl",
								"type": "DatasetReference",
								"parameters": {
									"tableName": {
										"value": "@pipeline().parameters.tableName",
										"type": "Expression"
									},
									"serverNamefromDataset": "serverName.net",
									"dbNamefromDataset": "dbName",
									"UserNamefromDataset": "user",
									"passwordfromDataset": "pass"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DataSetTest1Input",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DataSetMultipleFolders",
											"type": "DatasetReference",
											"parameters": {
												"OuputFolder": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"tableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-30T18:18:55Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataSetSQl')]",
				"[concat(variables('factoryId'), '/datasets/DataSetTest1Input')]",
				"[concat(variables('factoryId'), '/datasets/DataSetMultipleFolders')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineMetadata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MetaData of input folder",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DataSetTest1Output",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "MetaData of input folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "childitems",
							"value": {
								"value": "@activity('MetaData of input folder').output.childItems",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Output": {
						"type": "Array"
					},
					"Outputofactivity": {
						"type": "String"
					},
					"FolderExists": {
						"type": "Boolean"
					},
					"childitems": {
						"type": "Array"
					},
					"Size": {
						"type": "Integer"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-30T08:02:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataSetTest1Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineSQLParam')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "dbo.@{pipeline().parameters.sourceTableNameFromPipeline}"
							},
							{
								"name": "Destination",
								"value": "dbo.@{pipeline().parameters.destinationTableNameFromPipeline}"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DataSetSQl",
								"type": "DatasetReference",
								"parameters": {
									"tableName": {
										"value": "@pipeline().parameters.sourceTableNameFromPipeline",
										"type": "Expression"
									},
									"serverNamefromDataset": {
										"value": "@pipeline().parameters.serverNameFromPipeline",
										"type": "Expression"
									},
									"dbNamefromDataset": {
										"value": "@pipeline().parameters.dbNameFromPipeline",
										"type": "Expression"
									},
									"UserNamefromDataset": {
										"value": "@pipeline().parameters.userNameFromPipeline",
										"type": "Expression"
									},
									"passwordfromDataset": {
										"value": "@pipeline().parameters.passwordFromPipeline",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DataSetSQl",
								"type": "DatasetReference",
								"parameters": {
									"tableName": {
										"value": "@pipeline().parameters.destinationTableNameFromPipeline",
										"type": "Expression"
									},
									"serverNamefromDataset": {
										"value": "@pipeline().parameters.serverNameFromPipeline",
										"type": "Expression"
									},
									"dbNamefromDataset": {
										"value": "@pipeline().parameters.dbNameFromPipeline",
										"type": "Expression"
									},
									"UserNamefromDataset": {
										"value": "@pipeline().parameters.userNameFromPipeline",
										"type": "Expression"
									},
									"passwordfromDataset": {
										"value": "@pipeline().parameters.passwordFromPipeline",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"serverNameFromPipeline": {
						"type": "String"
					},
					"dbNameFromPipeline": {
						"type": "String"
					},
					"userNameFromPipeline": {
						"type": "String"
					},
					"passwordFromPipeline": {
						"type": "String"
					},
					"sourceTableNameFromPipeline": {
						"type": "String"
					},
					"destinationTableNameFromPipeline": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-29T07:23:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataSetSQl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineSwitchCase')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SwitchCase",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.FolderName",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "outputSwitch1",
									"activities": [
										{
											"name": "Copy data1",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": true
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "AzureBlobStorageWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "DataSetTest1Input",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "DataSetMultipleFolders",
													"type": "DatasetReference",
													"parameters": {
														"OuputFolder": {
															"value": "@pipeline().parameters.FolderName",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "outputSwitch2",
									"activities": [
										{
											"name": "Copy data2",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": true
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "AzureBlobStorageWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "DataSetTest1Input",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "DataSetMultipleFolders",
													"type": "DatasetReference",
													"parameters": {
														"OuputFolder": {
															"value": "@pipeline().parameters.FolderName",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"FolderName": {
						"type": "string",
						"defaultValue": "outputSwitch1"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-30T15:42:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataSetTest1Input')]",
				"[concat(variables('factoryId'), '/datasets/DataSetMultipleFolders')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineUntil')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until file comes",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@bool(variables('fileExists'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get MetadataofFile",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DataSetTest1Input",
											"type": "DatasetReference",
											"parameters": {}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get MetadataofFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@bool(activity('Get MetadataofFile').output.exists)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Wait1",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 60
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "fileExists",
													"value": "true"
												}
											}
										]
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Until file comes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DataSetTest1Input",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DataSetTest1Output",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"fileExists": {
						"type": "String",
						"defaultValue": "false"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-30T13:52:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataSetTest1Input')]",
				"[concat(variables('factoryId'), '/datasets/DataSetTest1Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineValidateand DriftSchemaCheck')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowValidateSchemaAndSchemaDrift",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceValidateSchema": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-08-02T10:00:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowValidateSchemaAndSchemaDrift')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineValidation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Validation1",
						"type": "Validation",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DataSetMultipleFolders",
								"type": "DatasetReference",
								"parameters": {
									"OuputFolder": {
										"value": "@pipeline().parameters.FolderName",
										"type": "Expression"
									}
								}
							},
							"timeout": "0.12:00:00",
							"sleep": 10
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Validation1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DataSetTest1Input",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DataSetTest1Output",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"FolderName": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-30T16:57:45Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataSetMultipleFolders')]",
				"[concat(variables('factoryId'), '/datasets/DataSetTest1Input')]",
				"[concat(variables('factoryId'), '/datasets/DataSetTest1Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineWebActivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RestAPICall",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://dummy.restapiexample.com/api/v1/employees"
						}
					},
					{
						"name": "WebHook1",
						"type": "WebHook",
						"dependsOn": [
							{
								"activity": "RestAPICall",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://dummy.restapiexample.com/api/v1/employees",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@activity('RestAPICall').output.status",
								"type": "Expression"
							},
							"timeout": "00:10:00",
							"reportStatusOnCallBack": false,
							"disableCertValidation": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-30T15:42:19Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineWriteCacheToSink')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowCacheSinkOutputToActivity",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employees": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					},
					{
						"name": "MaxSalary",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "maxSal",
							"value": {
								"value": "@activity('Data flow1').output.runStatus.output.sink1.value[0].MaxSalary",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"maxSal": {
						"type": "Integer"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowCacheSinkOutputToActivity')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binary1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceTest1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"outputFolder": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().outputFolder",
							"type": "Expression"
						},
						"container": "test1containerrg"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceTest1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_OnFail')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceTest1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ABC.csv",
						"folderPath": "input",
						"container": "test1containerrg"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empid",
						"type": "String"
					},
					{
						"name": "empName",
						"type": "String"
					},
					{
						"name": "location",
						"type": "String"
					},
					{
						"name": "department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceTest1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_Employee11')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedService_SQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "empId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "empName",
						"type": "varchar"
					},
					{
						"name": "skills",
						"type": "varchar"
					},
					{
						"name": "location",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "employee11"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedService_SQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlowSourceDepartment')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceTest1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "department.csv",
						"folderPath": "input",
						"container": "test1containerrg"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "department",
						"type": "String"
					},
					{
						"name": "role",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceTest1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlowSourceEmployee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceTest1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "employee.csv",
						"folderPath": "input",
						"container": "test1containerrg"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empid",
						"type": "String"
					},
					{
						"name": "empName",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "location",
						"type": "String"
					},
					{
						"name": "department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceTest1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataSetMultipleFolders')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceTest1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"OuputFolder": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().OuputFolder",
							"type": "Expression"
						},
						"container": "test1containerrg"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceTest1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataSetSQl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceSQL",
					"type": "LinkedServiceReference",
					"parameters": {
						"servername": {
							"value": "@dataset().serverNamefromDataset",
							"type": "Expression"
						},
						"dbName": {
							"value": "@dataset().dbNamefromDataset",
							"type": "Expression"
						},
						"username": {
							"value": "@dataset().UserNamefromDataset",
							"type": "Expression"
						},
						"password": {
							"value": "@dataset().passwordfromDataset",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"tableName": {
						"type": "String"
					},
					"serverNamefromDataset": {
						"type": "String"
					},
					"dbNamefromDataset": {
						"type": "String"
					},
					"UserNamefromDataset": {
						"type": "String"
					},
					"passwordfromDataset": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().tableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataSetTest1Input')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceTest1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "test1ADF.txt",
						"folderPath": "input",
						"container": "test1containerrg"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceTest1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataSetTest1Output')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceTest1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output",
						"container": "test1containerrg"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceTest1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataSet_SQLServer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedService_SQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "empId",
						"type": "varchar"
					},
					{
						"name": "empName",
						"type": "varchar"
					},
					{
						"name": "gender",
						"type": "varchar"
					},
					{
						"name": "location",
						"type": "varchar"
					},
					{
						"name": "department",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "employee"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedService_SQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedTextInput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceTest1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "dataCopy.csv",
						"folderPath": "input",
						"container": "test1containerrg"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Raka",
						"type": "String"
					},
					{
						"name": "Female",
						"type": "String"
					},
					{
						"name": "32",
						"type": "String"
					},
					{
						"name": "TCS",
						"type": "String"
					},
					{
						"name": "Kolkata",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceTest1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedTextOutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceTest1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output",
						"container": "test1containerrg"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceTest1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmpJSONDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceTest1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "employees.json",
						"folderPath": "input",
						"container": "test1containerrg"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"id": {
							"type": "integer"
						},
						"first_name": {
							"type": "string"
						},
						"last_name": {
							"type": "string"
						},
						"contact": {
							"type": "object",
							"properties": {
								"email": {
									"type": "string"
								},
								"phone": {
									"type": "string"
								}
							}
						},
						"skills": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"gender": {
							"type": "string"
						},
						"age": {
							"type": "integer"
						},
						"job_title": {
							"type": "string"
						},
						"years_of_experience": {
							"type": "integer"
						},
						"salary": {
							"type": "integer"
						},
						"department": {
							"type": "string"
						},
						"email": {
							"type": "string"
						},
						"phone": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceTest1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmpJSONOutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceTest1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output",
						"container": "test1containerrg"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceTest1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/InputSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceTest1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"inputfolder": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().inputfolder",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empid",
						"type": "String"
					},
					{
						"name": "empName",
						"type": "String"
					},
					{
						"name": "location",
						"type": "String"
					},
					{
						"name": "department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceTest1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LawEmployees')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceTest1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "LawEmp.csv",
						"folderPath": "input",
						"container": "test1containerrg"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empid",
						"type": "String"
					},
					{
						"name": "empName",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "location",
						"type": "String"
					},
					{
						"name": "department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceTest1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PhysicsDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceTest1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "PhysicsEmp.csv",
						"folderPath": "input",
						"container": "test1containerrg"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empid",
						"type": "String"
					},
					{
						"name": "empName",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "location",
						"type": "String"
					},
					{
						"name": "department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceTest1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UnPivotDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceTest1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "unpivot.csv",
						"folderPath": "input",
						"container": "test1containerrg"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Dept",
						"type": "String"
					},
					{
						"name": "Role",
						"type": "String"
					},
					{
						"name": "Male",
						"type": "String"
					},
					{
						"name": "Female",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceTest1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WindowDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceTest1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "employeewindow.csv",
						"folderPath": "input",
						"container": "test1containerrg"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empid",
						"type": "String"
					},
					{
						"name": "empName",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "location",
						"type": "String"
					},
					{
						"name": "department",
						"type": "String"
					},
					{
						"name": "Salary",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceTest1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/biologyDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceTest1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BiologyEmp.csv",
						"folderPath": "input",
						"container": "test1containerrg"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empid",
						"type": "String"
					},
					{
						"name": "empName",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "location",
						"type": "String"
					},
					{
						"name": "department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceTest1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedServiceSQL')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"servername": {
						"type": "string"
					},
					"dbName": {
						"type": "string"
					},
					"username": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('LinkedServiceSQL_properties_typeProperties_server')]",
					"database": "[parameters('LinkedServiceSQL_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('LinkedServiceSQL_properties_typeProperties_userName')]",
					"password": "@{linkedService().password}"
				},
				"connectVia": {
					"referenceName": "SelfHostIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SelfHostIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedServiceTest1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LinkedServiceTest1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedServiceTest2SelfHost')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LinkedServiceTest2SelfHost_connectionString')]"
				},
				"connectVia": {
					"referenceName": "SelfHostIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SelfHostIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedService_SQL')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('LinkedService_SQL_properties_typeProperties_server')]",
					"database": "[parameters('LinkedService_SQL_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('LinkedService_SQL_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('LinkedService_SQL_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/EventTriggerVariables')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pipeline1variables",
							"type": "PipelineReference"
						},
						"parameters": {
							"FileName": "[parameters('EventTriggerVariables_properties_pipeline1variables_parameters_FileName')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/test1containerrg/blobs/output/",
					"blobPathEndsWith": "dataCopy.txt",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('EventTriggerVariables_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated",
						"Microsoft.Storage.BlobDeleted"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pipeline1variables')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ScheduleTest1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Test1Pipeline",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 15,
						"startTime": "2024-07-28T14:30:00",
						"endTime": "2024-07-28T15:15:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Test1Pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SelfHostIR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowAggr')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DataFlowSourceEmployee",
								"type": "DatasetReference"
							},
							"name": "employee"
						},
						{
							"dataset": {
								"referenceName": "DataFlowSourceDepartment",
								"type": "DatasetReference"
							},
							"name": "department"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "TotalEmpBasedOnDeptwithRole",
							"rejectedDataLinkedService": {
								"referenceName": "LinkedServiceTest1",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "join1Aggr1AndDeptRole"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employee",
						"source(output(",
						"          department as string,",
						"          role as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> department",
						"employee aggregate(groupBy(department),",
						"     TotalEmployees = count(empid),",
						"     partitionBy('hash', 1)) ~> aggregate1",
						"aggregate1, department join(aggregate1@department == department@department,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1Aggr1AndDeptRole",
						"join1Aggr1AndDeptRole sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmpOnDeptwithRole.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          department = aggregate1@department,",
						"          TotalEmployees,",
						"          role",
						"     ),",
						"     partitionBy('hash', 1)) ~> TotalEmpBasedOnDeptwithRole"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataFlowSourceEmployee')]",
				"[concat(variables('factoryId'), '/datasets/DataFlowSourceDepartment')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedTextOutput')]",
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceTest1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowAlterRowTransform')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DataFlowSourceEmployee",
								"type": "DatasetReference"
							},
							"name": "sourceEmployees"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRowEmployee"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceEmployees",
						"sourceEmployees alterRow(deleteIf(equals(department,\"Physics\")),",
						"     updateIf(equals(department,\"Law\"))) ~> alterRowEmployee",
						"alterRowEmployee sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataFlowSourceEmployee')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedTextOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowBranch')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DataFlowSourceEmployee",
								"type": "DatasetReference"
							},
							"name": "employee"
						},
						{
							"dataset": {
								"referenceName": "DataFlowSourceDepartment",
								"type": "DatasetReference"
							},
							"name": "department"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "joinSink"
						},
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "EmpCountSink"
						},
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "SinkLookUp"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "joinempanddept"
						},
						{
							"name": "lookup1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employee",
						"source(output(",
						"          department as string,",
						"          role as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> department",
						"employee aggregate(groupBy(gender),",
						"     TotalEmployees = count(gender)) ~> aggregate1",
						"employee, department join(employee@department == department@department,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinempanddept",
						"employee, department lookup(employee@department == department@department,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"joinempanddept sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['joinempanddept.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          empid,",
						"          empName,",
						"          gender,",
						"          location,",
						"          department = employee@department,",
						"          role",
						"     ),",
						"     partitionBy('hash', 1)) ~> joinSink",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['genderwithempcount.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          gender,",
						"          TotalEmployees",
						"     ),",
						"     partitionBy('hash', 1)) ~> EmpCountSink",
						"lookup1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['lookup.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     mapColumn(",
						"          empid,",
						"          empName,",
						"          gender,",
						"          location,",
						"          department = employee@department,",
						"          dept = department@department,",
						"          role",
						"     ),",
						"     partitionBy('hash', 1)) ~> SinkLookUp"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataFlowSourceEmployee')]",
				"[concat(variables('factoryId'), '/datasets/DataFlowSourceDepartment')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedTextOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowCSVjoin')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DataFlowSourceEmployee",
								"type": "DatasetReference"
							},
							"name": "employee"
						},
						{
							"dataset": {
								"referenceName": "DataFlowSourceDepartment",
								"type": "DatasetReference"
							},
							"name": "department"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "joinOutput",
							"rejectedDataLinkedService": {
								"referenceName": "LinkedServiceTest1",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "employeeJOINdepartment"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employee",
						"source(output(",
						"          department as string,",
						"          role as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> department",
						"employee, department join(employee@department == department@department,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> employeeJOINdepartment",
						"employeeJOINdepartment sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['empjoindeptoutput.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          empid,",
						"          empName,",
						"          gender,",
						"          location,",
						"          role",
						"     ),",
						"     partitionBy('hash', 1)) ~> joinOutput"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataFlowSourceEmployee')]",
				"[concat(variables('factoryId'), '/datasets/DataFlowSourceDepartment')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedTextOutput')]",
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceTest1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowCacheSink')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DataSet_SQLServer",
								"type": "DatasetReference"
							},
							"name": "employees"
						},
						{
							"dataset": {
								"referenceName": "DataFlowSourceEmployee",
								"type": "DatasetReference"
							},
							"name": "Employee"
						}
					],
					"sinks": [
						{
							"name": "MaxCountofEmpId"
						},
						{
							"dataset": {
								"referenceName": "DataSet_SQLServer",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "selectcolumns"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          MaxEmpId as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select max(empId) as MaxEmpId from dbo.employee',",
						"     format: 'query') ~> employees",
						"source(output(",
						"          empid as long,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Employee",
						"Employee select(mapColumn(",
						"          empName,",
						"          gender,",
						"          location,",
						"          department",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectcolumns",
						"selectcolumns keyGenerate(output(empId as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(empId = empId+MaxCountofEmpId#outputs()[1].MaxEmpId) ~> derivedColumn1",
						"employees sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 0,",
						"     mapColumn(",
						"          MaxEmpId",
						"     )) ~> MaxCountofEmpId",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          empId as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataSet_SQLServer')]",
				"[concat(variables('factoryId'), '/datasets/DataFlowSourceEmployee')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowCacheSinkOutputToActivity')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "WindowDataSet",
								"type": "DatasetReference"
							},
							"name": "employees"
						}
					],
					"sinks": [
						{
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string,",
						"          Salary as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employees",
						"employees aggregate(MaxSalary = max(toInteger(Salary))) ~> aggregate1",
						"aggregate1 sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: true,",
						"     saveOrder: 1) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/WindowDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowConditionalSplit')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DataFlowSourceEmployee",
								"type": "DatasetReference"
							},
							"name": "Employees"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "BiologyEmpSink"
						},
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "PhysicsEmpSink"
						},
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "LawEmpSink"
						},
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "OtherEmpSink"
						}
					],
					"transformations": [
						{
							"name": "SplitBasedOnDept"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Employees",
						"Employees split(equalsIgnoreCase(department,\"biology\"),",
						"     equalsIgnoreCase(department,\"law\"),",
						"     equalsIgnoreCase(department,\"physics\"),",
						"     disjoint: false) ~> SplitBasedOnDept@(BiologyEmployees, LawEmployees, PhysicsEmployees, Others)",
						"SplitBasedOnDept@BiologyEmployees sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BiologyEmp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> BiologyEmpSink",
						"SplitBasedOnDept@PhysicsEmployees sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['PhysicsEmp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> PhysicsEmpSink",
						"SplitBasedOnDept@LawEmployees sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['LawEmp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> LawEmpSink",
						"SplitBasedOnDept@Others sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['PsychologyEmp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OtherEmpSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataFlowSourceEmployee')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedTextOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowDerivedColumn')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DataFlowSourceEmployee",
								"type": "DatasetReference"
							},
							"name": "employee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "EmpWithRegion"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employee",
						"employee derive(gender = upper(gender),",
						"          region = iif(equalsIgnoreCase(location, \"Mexico\"),\"Central America\",\"North America\"),",
						"          experience = case(equalsIgnoreCase(empName,\"ABC\"),5\r",
						",equalsIgnoreCase(empName,\"WTR\"),10,equalsIgnoreCase(empName,\"TGF\"),15,equalsIgnoreCase(empName,\"ITE\"),20)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmployeeWithRegion.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> EmpWithRegion"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataFlowSourceEmployee')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedTextOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowExists')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DataFlowSourceEmployee",
								"type": "DatasetReference"
							},
							"name": "employee"
						},
						{
							"dataset": {
								"referenceName": "DataFlowSourceDepartment",
								"type": "DatasetReference"
							},
							"name": "department"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "employeeExists"
						}
					],
					"transformations": [
						{
							"name": "exists1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employee",
						"source(output(",
						"          department as string,",
						"          role as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> department",
						"employee, department exists(employee@department == iif(equals(department@department,'Law'),\"Law\",\"\"),",
						"     negate:true,",
						"     broadcast: 'auto')~> exists1",
						"exists1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['employeeExists.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> employeeExists"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataFlowSourceEmployee')]",
				"[concat(variables('factoryId'), '/datasets/DataFlowSourceDepartment')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedTextOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowFilterTrans')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DataFlowSourceEmployee",
								"type": "DatasetReference"
							},
							"name": "employee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "FilteredEmployees",
							"rejectedDataLinkedService": {
								"referenceName": "LinkedServiceTest1",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "filteremployeesbasedondept"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 10,",
						"     ignoreNoFilesFound: false) ~> employee",
						"employee filter(notEquals(department,\"Biology\")) ~> filteremployeesbasedondept",
						"filteremployeesbasedondept sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['FilteredEmployees.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          empid,",
						"          empName,",
						"          gender,",
						"          location,",
						"          department",
						"     ),",
						"     partitionBy('hash', 1)) ~> FilteredEmployees"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataFlowSourceEmployee')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedTextOutput')]",
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceTest1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowJSONEmp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmpJSONDataSet",
								"type": "DatasetReference"
							},
							"name": "EmployeeJSONData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EmpJSONOutput",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          age as short,",
						"          contact as (email as string, phone as string),",
						"          department as string,",
						"          email as string,",
						"          first_name as string,",
						"          gender as string,",
						"          id as boolean,",
						"          job_title as string,",
						"          last_name as string,",
						"          phone as string,",
						"          salary as short,",
						"          skills as string[],",
						"          years_of_experience as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'singleDocument') ~> EmployeeJSONData",
						"EmployeeJSONData foldDown(unroll(skills),",
						"     mapColumn(",
						"          id,",
						"          first_name,",
						"          last_name,",
						"          gender,",
						"          age,",
						"          contact,",
						"          skills,",
						"          department,",
						"          job_title,",
						"          salary,",
						"          years_of_experience",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmployeesJSONOutput'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          first_name,",
						"          last_name,",
						"          age,",
						"          contact,",
						"          department,",
						"          gender,",
						"          job_title,",
						"          salary,",
						"          skills,",
						"          years_of_experience",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EmpJSONDataSet')]",
				"[concat(variables('factoryId'), '/datasets/EmpJSONOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowLookup')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DataFlowSourceEmployee",
								"type": "DatasetReference"
							},
							"name": "Employee"
						},
						{
							"dataset": {
								"referenceName": "DataFlowSourceDepartment",
								"type": "DatasetReference"
							},
							"name": "Department"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "LookUpOutput",
							"rejectedDataLinkedService": {
								"referenceName": "LinkedServiceTest1",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "lookupEMpAndDept"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Employee",
						"source(output(",
						"          department as string,",
						"          role as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Department",
						"Employee, Department lookup(Employee@department == Department@department,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupEMpAndDept",
						"lookupEMpAndDept sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmployeeLookUp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     mapColumn(",
						"          empid,",
						"          empName,",
						"          gender,",
						"          location,",
						"          department = Employee@department,",
						"          dept = Department@department,",
						"          role",
						"     ),",
						"     partitionBy('hash', 1)) ~> LookUpOutput"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataFlowSourceEmployee')]",
				"[concat(variables('factoryId'), '/datasets/DataFlowSourceDepartment')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedTextOutput')]",
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceTest1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowParameteriztn')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DataFlowSourceEmployee",
								"type": "DatasetReference"
							},
							"name": "employeedata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "sinkEMployeesParam"
						}
					],
					"transformations": [
						{
							"name": "filterEmployeeOndept"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Dept as string",
						"}",
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employeedata",
						"employeedata filter(department != $Dept) ~> filterEmployeeOndept",
						"filterEmployeeOndept sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EMployeesParam.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkEMployeesParam"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataFlowSourceEmployee')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedTextOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowParse')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_Employee11",
								"type": "DatasetReference"
							},
							"name": "employee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "employeeSink"
						}
					],
					"transformations": [
						{
							"name": "parseSkills"
						},
						{
							"name": "parselocation"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empId as integer,",
						"          empName as string,",
						"          skills as string,",
						"          location as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> employee",
						"employee parse(skills = skills ? (skill1 as string,",
						"          skill2 as string,",
						"          skill3 as string),",
						"     format: 'delimited',",
						"     columnNamesAsHeader: false,",
						"     columnDelimiter: '|',",
						"     nullValue: '') ~> parseSkills",
						"parseSkills parse(location = location ? (city as string,",
						"          country as string),",
						"     format: 'json',",
						"     documentForm: 'singleDocument') ~> parselocation",
						"parselocation sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['employeeparsedoutput.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          empId,",
						"          empName,",
						"          Skill1 = skills.skill1,",
						"          Skill2 = skills.skill2,",
						"          Skill3 = skills.skill3,",
						"          City = location.city,",
						"          Country = location.country",
						"     ),",
						"     partitionBy('hash', 1)) ~> employeeSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_Employee11')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedTextOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowPivot')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DataFlowSourceEmployee",
								"type": "DatasetReference"
							},
							"name": "employee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "SinkPivot"
						}
					],
					"transformations": [
						{
							"name": "pivotEmployee"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employee",
						"employee pivot(groupBy(department),",
						"     pivotBy(gender),",
						"     {} = count(empid),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> pivotEmployee",
						"pivotEmployee sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['SinkPivotEmployee.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkPivot"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataFlowSourceEmployee')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedTextOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowRank')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "WindowDataSet",
								"type": "DatasetReference"
							},
							"name": "sourceEMployees"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "sinkEompoyeesWithRank"
						}
					],
					"transformations": [
						{
							"name": "rankofEmployees"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string,",
						"          Salary as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceEMployees",
						"sourceEMployees rank(asc(Salary, true),",
						"     output(Rank as long),",
						"     dense: true) ~> rankofEmployees",
						"rankofEmployees sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmployeesWithRank.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          empid,",
						"          empName,",
						"          gender,",
						"          location,",
						"          department,",
						"          Salary,",
						"          Rank",
						"     ),",
						"     partitionBy('hash', 1)) ~> sinkEompoyeesWithRank"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/WindowDataSet')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedTextOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowSelectTransform')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DataFlowSourceEmployee",
								"type": "DatasetReference"
							},
							"name": "employee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "EmployeePostSelectOperation"
						}
					],
					"transformations": [
						{
							"name": "selectEmployees"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employee",
						"employee select(mapColumn(",
						"          EmployeeId = empid,",
						"          EmpName = empName,",
						"          Location = location,",
						"          Department = department,",
						"          Gender = gender",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectEmployees",
						"selectEmployees sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmployeePostSelectOperation.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          EmployeeId,",
						"          EmpName,",
						"          Location,",
						"          Department,",
						"          Gender",
						"     ),",
						"     partitionBy('hash', 1)) ~> EmployeePostSelectOperation"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataFlowSourceEmployee')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedTextOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowSortTransform')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DataFlowSourceEmployee",
								"type": "DatasetReference"
							},
							"name": "Employees"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "sinkEmployees"
						}
					],
					"transformations": [
						{
							"name": "sortEmployees"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Employees",
						"Employees sort(asc(empName, true)) ~> sortEmployees",
						"sortEmployees sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmployeesSorted.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          empid,",
						"          empName,",
						"          gender,",
						"          location,",
						"          department",
						"     ),",
						"     partitionBy('hash', 1)) ~> sinkEmployees"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataFlowSourceEmployee')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedTextOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowSurrogateKey')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DataFlowSourceEmployee",
								"type": "DatasetReference"
							},
							"name": "Employee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "sinkSurrogateKey"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Employee",
						"Employee keyGenerate(output(RollNo as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 select(mapColumn(",
						"          RollNo,",
						"          empid,",
						"          empName,",
						"          gender,",
						"          location,",
						"          department",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['sinkSurrogateKey.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkSurrogateKey"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataFlowSourceEmployee')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedTextOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowUnion')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "biologyDataSet",
								"type": "DatasetReference"
							},
							"name": "BiologyEmployees"
						},
						{
							"dataset": {
								"referenceName": "PhysicsDataSet",
								"type": "DatasetReference"
							},
							"name": "PhysicsEmployees"
						},
						{
							"dataset": {
								"referenceName": "LawEmployees",
								"type": "DatasetReference"
							},
							"name": "LawEmployees"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "allEmployeesSink"
						}
					],
					"transformations": [
						{
							"name": "allEmployees"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BiologyEmployees",
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PhysicsEmployees",
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> LawEmployees",
						"BiologyEmployees, PhysicsEmployees, LawEmployees union(byName: true)~> allEmployees",
						"allEmployees sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['allEmployeesUnion.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> allEmployeesSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/biologyDataSet')]",
				"[concat(variables('factoryId'), '/datasets/PhysicsDataSet')]",
				"[concat(variables('factoryId'), '/datasets/LawEmployees')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedTextOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowUnpivot')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "UnPivotDataSet",
								"type": "DatasetReference"
							},
							"name": "EmployeeUnpivot"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "UnpivotEmployees"
						}
					],
					"transformations": [
						{
							"name": "unpivotEmployee"
						},
						{
							"name": "ModifyColumns1",
							"description": "Autogenerated by data preview actions"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Dept as string,",
						"          Role as string,",
						"          Male as string,",
						"          Female as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmployeeUnpivot",
						"EmployeeUnpivot unpivot(output(",
						"          Gender as string,",
						"          CountPerDeptAndRole as string",
						"     ),",
						"     ungroupBy(Dept,",
						"          Role),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivotEmployee",
						"unpivotEmployee derive(Gender = upper(Gender),",
						"          Dept = upper(Dept)) ~> ModifyColumns1",
						"ModifyColumns1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['UnpivotEmployee.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> UnpivotEmployees"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/UnPivotDataSet')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedTextOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowValidateSchemaAndSchemaDrift')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "biologyDataSet",
								"type": "DatasetReference"
							},
							"name": "sourceValidateSchema"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          empid as boolean,",
						"          empName as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     preferredIntegralType: 'integer') ~> sourceValidateSchema",
						"sourceValidateSchema sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['validation.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          empid,",
						"          empName,",
						"          location,",
						"          department",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/biologyDataSet')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedTextOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowWindowTransform')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "WindowDataSet",
								"type": "DatasetReference"
							},
							"name": "sourceMultipleEmployees"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "sinkEmpWindow"
						}
					],
					"transformations": [
						{
							"name": "window1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as short,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string,",
						"          Salary as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceMultipleEmployees",
						"sourceMultipleEmployees window(over(department),",
						"     asc(Salary, true),",
						"     AvgSalary = avg(Salary),",
						"          Rank = denseRank()) ~> window1",
						"window1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['sinkEmpWindow.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkEmpWindow"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/WindowDataSet')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedTextOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/powerqueryTableUpdate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "DataFlowSourceEmployee",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> DataFlowSourceEmployee",
							"dataset": {
								"referenceName": "DataFlowSourceEmployee",
								"type": "DatasetReference"
							}
						}
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataFlowSourceEmployee')]"
			]
		}
	]
}