{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Test1TrialADF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/dataflowRank')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "WindowDataSet",
								"type": "DatasetReference"
							},
							"name": "sourceEMployees"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "sinkEompoyeesWithRank"
						}
					],
					"transformations": [
						{
							"name": "rankofEmployees"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string,",
						"          Salary as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceEMployees",
						"sourceEMployees rank(asc(Salary, true),",
						"     output(Rank as long),",
						"     dense: true) ~> rankofEmployees",
						"rankofEmployees sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmployeesWithRank.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          empid,",
						"          empName,",
						"          gender,",
						"          location,",
						"          department,",
						"          Salary,",
						"          Rank",
						"     ),",
						"     partitionBy('hash', 1)) ~> sinkEompoyeesWithRank"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowSelectTransform')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DataFlowSourceEmployee",
								"type": "DatasetReference"
							},
							"name": "employee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "EmployeePostSelectOperation"
						}
					],
					"transformations": [
						{
							"name": "selectEmployees"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employee",
						"employee select(mapColumn(",
						"          EmployeeId = empid,",
						"          EmpName = empName,",
						"          Location = location,",
						"          Department = department,",
						"          Gender = gender",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectEmployees",
						"selectEmployees sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmployeePostSelectOperation.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          EmployeeId,",
						"          EmpName,",
						"          Location,",
						"          Department,",
						"          Gender",
						"     ),",
						"     partitionBy('hash', 1)) ~> EmployeePostSelectOperation"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowSortTransform')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DataFlowSourceEmployee",
								"type": "DatasetReference"
							},
							"name": "Employees"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "sinkEmployees"
						}
					],
					"transformations": [
						{
							"name": "sortEmployees"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Employees",
						"Employees sort(asc(empName, true)) ~> sortEmployees",
						"sortEmployees sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmployeesSorted.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          empid,",
						"          empName,",
						"          gender,",
						"          location,",
						"          department",
						"     ),",
						"     partitionBy('hash', 1)) ~> sinkEmployees"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowSurrogateKey')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DataFlowSourceEmployee",
								"type": "DatasetReference"
							},
							"name": "Employee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "sinkSurrogateKey"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Employee",
						"Employee keyGenerate(output(RollNo as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 select(mapColumn(",
						"          RollNo,",
						"          empid,",
						"          empName,",
						"          gender,",
						"          location,",
						"          department",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['sinkSurrogateKey.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkSurrogateKey"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowUnion')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "biologyDataSet",
								"type": "DatasetReference"
							},
							"name": "BiologyEmployees"
						},
						{
							"dataset": {
								"referenceName": "PhysicsDataSet",
								"type": "DatasetReference"
							},
							"name": "PhysicsEmployees"
						},
						{
							"dataset": {
								"referenceName": "LawEmployees",
								"type": "DatasetReference"
							},
							"name": "LawEmployees"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "allEmployeesSink"
						}
					],
					"transformations": [
						{
							"name": "allEmployees"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BiologyEmployees",
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PhysicsEmployees",
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> LawEmployees",
						"BiologyEmployees, PhysicsEmployees, LawEmployees union(byName: true)~> allEmployees",
						"allEmployees sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['allEmployeesUnion.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> allEmployeesSink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowUnpivot')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "UnPivotDataSet",
								"type": "DatasetReference"
							},
							"name": "EmployeeUnpivot"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "UnpivotEmployees"
						}
					],
					"transformations": [
						{
							"name": "unpivotEmployee"
						},
						{
							"name": "ModifyColumns1",
							"description": "Autogenerated by data preview actions"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Dept as string,",
						"          Role as string,",
						"          Male as string,",
						"          Female as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmployeeUnpivot",
						"EmployeeUnpivot unpivot(output(",
						"          Gender as string,",
						"          CountPerDeptAndRole as string",
						"     ),",
						"     ungroupBy(Dept,",
						"          Role),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivotEmployee",
						"unpivotEmployee derive(Gender = upper(Gender),",
						"          Dept = upper(Dept)) ~> ModifyColumns1",
						"ModifyColumns1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['UnpivotEmployee.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> UnpivotEmployees"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowUserDefinedFunction')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "WindowDataSet",
								"type": "DatasetReference"
							},
							"name": "employee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "MappingOfGenderColumnValues"
						}
					],
					"udfLibraries": [
						{
							"referenceName": "GenderMappingFunction",
							"type": "DataFlowReference"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string,",
						"          Salary as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employee",
						"employee derive(gender = GenderToIntegerFunction(gender)) ~> MappingOfGenderColumnValues",
						"MappingOfGenderColumnValues sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmployeeWithGenderIntegerMapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          empid,",
						"          empName,",
						"          gender,",
						"          location,",
						"          department,",
						"          Salary",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowUsingFlowlet')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "WindowDataSet",
								"type": "DatasetReference"
							},
							"name": "employeesWithDuplicateRows"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "sinkOfEmployees"
						}
					],
					"transformations": [
						{
							"name": "flowlet1",
							"flowlet": {
								"referenceName": "flowletForRemovingDuplicates",
								"type": "DataFlowReference",
								"parameters": {}
							}
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string,",
						"          Salary as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employeesWithDuplicateRows",
						"employeesWithDuplicateRows compose(mapColumn(",
						"          empName,",
						"          gender,",
						"          department",
						"     ),",
						"     composition: 'flowletForRemovingDuplicates') ~> flowlet1@(outputofFlowlet)",
						"flowlet1@outputofFlowlet sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmployeesFlowlet.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          empId,",
						"          empName,",
						"          gender,",
						"          department",
						"     ),",
						"     partitionBy('hash', 1)) ~> sinkOfEmployees"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowValidateSchemaAndSchemaDrift')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "biologyDataSet",
								"type": "DatasetReference"
							},
							"name": "sourceValidateSchema"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          empid as boolean,",
						"          empName as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     preferredIntegralType: 'integer') ~> sourceValidateSchema",
						"sourceValidateSchema sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['validation.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          empid,",
						"          empName,",
						"          location,",
						"          department",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowWindowTransform')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "WindowDataSet",
								"type": "DatasetReference"
							},
							"name": "sourceMultipleEmployees"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "sinkEmpWindow"
						}
					],
					"transformations": [
						{
							"name": "window1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as short,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string,",
						"          Salary as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceMultipleEmployees",
						"sourceMultipleEmployees window(over(department),",
						"     asc(Salary, true),",
						"     AvgSalary = avg(Salary),",
						"          Rank = denseRank()) ~> window1",
						"window1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['sinkEmpWindow.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkEmpWindow"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/powerqueryTableUpdate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "DataFlowSourceEmployee",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> DataFlowSourceEmployee",
							"dataset": {
								"referenceName": "DataFlowSourceEmployee",
								"type": "DatasetReference"
							}
						}
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1variables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FileName",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "FileName",
							"value": {
								"value": "@replace(pipeline().parameters.FileName,'Sales','')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If FileType is Hourly",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "FileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('FileName'),'Hourly')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy data to Daily Table",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SqlServerSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DataSetSQl",
											"type": "DatasetReference",
											"parameters": {
												"tableName": "tableNameSource",
												"serverNamefromDataset": "serverName",
												"dbNamefromDataset": "dbName",
												"UserNamefromDataset": "User",
												"passwordfromDataset": "Pass"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DataSetSQl",
											"type": "DatasetReference",
											"parameters": {
												"tableName": "tableNameDest",
												"serverNamefromDataset": "serverName",
												"dbNamefromDataset": "dbName",
												"UserNamefromDataset": "User",
												"passwordfromDataset": "Pass"
											}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy data to Hourly Table",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SqlServerSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DataSetSQl",
											"type": "DatasetReference",
											"parameters": {
												"tableName": "tableNameSource",
												"serverNamefromDataset": "serverName",
												"dbNamefromDataset": "dbName",
												"UserNamefromDataset": "User",
												"passwordfromDataset": "Pass"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DataSetSQl",
											"type": "DatasetReference",
											"parameters": {
												"tableName": "tableNameDest",
												"serverNamefromDataset": "serverName",
												"dbNamefromDataset": "dbName",
												"UserNamefromDataset": "User",
												"passwordfromDataset": "Pass"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"variables": {
					"FileName": {
						"type": "String"
					},
					"ListOfFiles": {
						"type": "Array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-29T15:46:50Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineCacheSink')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowCacheSink",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employees": {},
									"Employee": {},
									"MaxCountofEmpId": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineDataFlowAggr')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowAggr",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employee": {},
									"department": {},
									"TotalEmpBasedOnDeptwithRole": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-31T09:25:41Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineDataFlowConditionalSplit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DataFlowConditionalSplit",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowConditionalSplit",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Employees": {},
									"BiologyEmpSink": {},
									"PhysicsEmpSink": {},
									"LawEmpSink": {},
									"OtherEmpSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-08-01T07:52:09Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineDataFlowDerivedColumn')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowDerivedColumn",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employee": {},
									"EmpWithRegion": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-08-01T09:04:31Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineDataFlowFilter')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowFilterTrans",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employee": {},
									"FilteredEmployees": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-31T08:33:50Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineDataFlowJoin')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "EmpJOINDept",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowCSVjoin",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employee": {},
									"department": {},
									"joinOutput": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-31T08:06:59Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineDataFlowLookUp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowLookup",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Employee": {},
									"Department": {},
									"LookUpOutput": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-08-01T15:24:37Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineDataFlowParam')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowParameteriztn",
								"type": "DataFlowReference",
								"parameters": {
									"Dept": {
										"value": "'@{pipeline().parameters.DeprName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"employeedata": {},
									"sinkEMployeesParam": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"DeprName": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-08-02T09:10:07Z"
			},
			"dependsOn": []
		}
	]
}