{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Test1TrialADF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/dataflowFilterTrans')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DataFlowSourceEmployee",
								"type": "DatasetReference"
							},
							"name": "employee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "FilteredEmployees",
							"rejectedDataLinkedService": {
								"referenceName": "LinkedServiceTest1",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "filteremployeesbasedondept"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 10,",
						"     ignoreNoFilesFound: false) ~> employee",
						"employee filter(notEquals(department,\"Biology\")) ~> filteremployeesbasedondept",
						"filteremployeesbasedondept sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['FilteredEmployees.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          empid,",
						"          empName,",
						"          gender,",
						"          location,",
						"          department",
						"     ),",
						"     partitionBy('hash', 1)) ~> FilteredEmployees"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowFuzzyJoins')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "LawEmployees",
								"type": "DatasetReference"
							},
							"name": "law"
						},
						{
							"dataset": {
								"referenceName": "PhysicsDataSet",
								"type": "DatasetReference"
							},
							"name": "physics"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as short,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> law",
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> physics",
						"law, physics join(fuzzyCompare(law@gender, physics@gender, 64.00),",
						"     joinType:'inner',",
						"     matchType:'fuzzy',",
						"     ignoreSpaces: false,",
						"     broadcast: 'off')~> join1",
						"join1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowJSONEmp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmpJSONDataSet",
								"type": "DatasetReference"
							},
							"name": "EmployeeJSONData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EmpJSONOutput",
								"type": "DatasetReference"
							},
							"name": "FlattenedJSONoutput",
							"description": "when flatten is used, arraydata type values are converted into multiple rows."
						},
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "stringifyJSON"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          age as short,",
						"          contact as (email as string, phone as string),",
						"          department as string,",
						"          email as string,",
						"          first_name as string,",
						"          gender as string,",
						"          id as boolean,",
						"          job_title as string,",
						"          last_name as string,",
						"          phone as string,",
						"          salary as short,",
						"          skills as string[],",
						"          years_of_experience as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'singleDocument') ~> EmployeeJSONData",
						"EmployeeJSONData foldDown(unroll(skills),",
						"     mapColumn(",
						"          id,",
						"          first_name,",
						"          last_name,",
						"          gender,",
						"          age,",
						"          contact,",
						"          skills,",
						"          department,",
						"          job_title,",
						"          salary,",
						"          years_of_experience",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"EmployeeJSONData stringify(contact = contact ? string,",
						"     format: 'json') ~> stringifyJSON",
						"stringifyJSON derive(contact = toString(contact)) ~> derivedColumn1",
						"flatten1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmployeesJSONOutput'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          first_name,",
						"          last_name,",
						"          age,",
						"          contact,",
						"          department,",
						"          gender,",
						"          job_title,",
						"          salary,",
						"          skills,",
						"          years_of_experience",
						"     ),",
						"     partitionBy('hash', 1)) ~> FlattenedJSONoutput",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['empJSON.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          age,",
						"          contact,",
						"          department,",
						"          first_name,",
						"          gender,",
						"          id,",
						"          job_title,",
						"          last_name,",
						"          salary,",
						"          skills",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowLookup')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DataFlowSourceEmployee",
								"type": "DatasetReference"
							},
							"name": "Employee"
						},
						{
							"dataset": {
								"referenceName": "DataFlowSourceDepartment",
								"type": "DatasetReference"
							},
							"name": "Department"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "LookUpOutput",
							"rejectedDataLinkedService": {
								"referenceName": "LinkedServiceTest1",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "lookupEMpAndDept"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Employee",
						"source(output(",
						"          department as string,",
						"          role as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Department",
						"Employee, Department lookup(Employee@department == Department@department,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupEMpAndDept",
						"lookupEMpAndDept sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmployeeLookUp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     mapColumn(",
						"          empid,",
						"          empName,",
						"          gender,",
						"          location,",
						"          department = Employee@department,",
						"          dept = Department@department,",
						"          role",
						"     ),",
						"     partitionBy('hash', 1)) ~> LookUpOutput"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowParameteriztn')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DataFlowSourceEmployee",
								"type": "DatasetReference"
							},
							"name": "employeedata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "sinkEMployeesParam"
						}
					],
					"transformations": [
						{
							"name": "filterEmployeeOndept"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Dept as string",
						"}",
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employeedata",
						"employeedata filter(department != $Dept) ~> filterEmployeeOndept",
						"filterEmployeeOndept sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EMployeesParam.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkEMployeesParam"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowParse')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_Employee11",
								"type": "DatasetReference"
							},
							"name": "employee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "employeeSink"
						}
					],
					"transformations": [
						{
							"name": "parseSkills"
						},
						{
							"name": "parselocation"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empId as integer,",
						"          empName as string,",
						"          skills as string,",
						"          location as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> employee",
						"employee parse(skills = skills ? (skill1 as string,",
						"          skill2 as string,",
						"          skill3 as string),",
						"     format: 'delimited',",
						"     columnNamesAsHeader: false,",
						"     columnDelimiter: '|',",
						"     nullValue: '') ~> parseSkills",
						"parseSkills parse(location = location ? (city as string,",
						"          country as string),",
						"     format: 'json',",
						"     documentForm: 'singleDocument') ~> parselocation",
						"parselocation sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['employeeparsedoutput.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          empId,",
						"          empName,",
						"          Skill1 = skills.skill1,",
						"          Skill2 = skills.skill2,",
						"          Skill3 = skills.skill3,",
						"          City = location.city,",
						"          Country = location.country",
						"     ),",
						"     partitionBy('hash', 1)) ~> employeeSink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowPivot')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DataFlowSourceEmployee",
								"type": "DatasetReference"
							},
							"name": "employee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "SinkPivot"
						}
					],
					"transformations": [
						{
							"name": "pivotEmployee"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employee",
						"employee pivot(groupBy(department),",
						"     pivotBy(gender),",
						"     {} = count(empid),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> pivotEmployee",
						"pivotEmployee sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['SinkPivotEmployee.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkPivot"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowRank')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "WindowDataSet",
								"type": "DatasetReference"
							},
							"name": "sourceEMployees"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "sinkEompoyeesWithRank"
						}
					],
					"transformations": [
						{
							"name": "rankofEmployees"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string,",
						"          Salary as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceEMployees",
						"sourceEMployees rank(asc(Salary, true),",
						"     output(Rank as long),",
						"     dense: true) ~> rankofEmployees",
						"rankofEmployees sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmployeesWithRank.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          empid,",
						"          empName,",
						"          gender,",
						"          location,",
						"          department,",
						"          Salary,",
						"          Rank",
						"     ),",
						"     partitionBy('hash', 1)) ~> sinkEompoyeesWithRank"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowSelectTransform')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DataFlowSourceEmployee",
								"type": "DatasetReference"
							},
							"name": "employee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "EmployeePostSelectOperation"
						}
					],
					"transformations": [
						{
							"name": "selectEmployees"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employee",
						"employee select(mapColumn(",
						"          EmployeeId = empid,",
						"          EmpName = empName,",
						"          Location = location,",
						"          Department = department,",
						"          Gender = gender",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectEmployees",
						"selectEmployees sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmployeePostSelectOperation.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          EmployeeId,",
						"          EmpName,",
						"          Location,",
						"          Department,",
						"          Gender",
						"     ),",
						"     partitionBy('hash', 1)) ~> EmployeePostSelectOperation"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowSortTransform')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DataFlowSourceEmployee",
								"type": "DatasetReference"
							},
							"name": "Employees"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "sinkEmployees"
						}
					],
					"transformations": [
						{
							"name": "sortEmployees"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Employees",
						"Employees sort(asc(empName, true)) ~> sortEmployees",
						"sortEmployees sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmployeesSorted.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          empid,",
						"          empName,",
						"          gender,",
						"          location,",
						"          department",
						"     ),",
						"     partitionBy('hash', 1)) ~> sinkEmployees"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowSurrogateKey')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DataFlowSourceEmployee",
								"type": "DatasetReference"
							},
							"name": "Employee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "sinkSurrogateKey"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Employee",
						"Employee keyGenerate(output(RollNo as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 select(mapColumn(",
						"          RollNo,",
						"          empid,",
						"          empName,",
						"          gender,",
						"          location,",
						"          department",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['sinkSurrogateKey.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkSurrogateKey"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowUnion')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "biologyDataSet",
								"type": "DatasetReference"
							},
							"name": "BiologyEmployees"
						},
						{
							"dataset": {
								"referenceName": "PhysicsDataSet",
								"type": "DatasetReference"
							},
							"name": "PhysicsEmployees"
						},
						{
							"dataset": {
								"referenceName": "LawEmployees",
								"type": "DatasetReference"
							},
							"name": "LawEmployees"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "allEmployeesSink"
						}
					],
					"transformations": [
						{
							"name": "allEmployees"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BiologyEmployees",
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PhysicsEmployees",
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> LawEmployees",
						"BiologyEmployees, PhysicsEmployees, LawEmployees union(byName: true)~> allEmployees",
						"allEmployees sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['allEmployeesUnion.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> allEmployeesSink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowUnpivot')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "UnPivotDataSet",
								"type": "DatasetReference"
							},
							"name": "EmployeeUnpivot"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "UnpivotEmployees"
						}
					],
					"transformations": [
						{
							"name": "unpivotEmployee"
						},
						{
							"name": "ModifyColumns1",
							"description": "Autogenerated by data preview actions"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Dept as string,",
						"          Role as string,",
						"          Male as string,",
						"          Female as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmployeeUnpivot",
						"EmployeeUnpivot unpivot(output(",
						"          Gender as string,",
						"          CountPerDeptAndRole as string",
						"     ),",
						"     ungroupBy(Dept,",
						"          Role),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivotEmployee",
						"unpivotEmployee derive(Gender = upper(Gender),",
						"          Dept = upper(Dept)) ~> ModifyColumns1",
						"ModifyColumns1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['UnpivotEmployee.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> UnpivotEmployees"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowUserDefinedFunction')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "WindowDataSet",
								"type": "DatasetReference"
							},
							"name": "employee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "MappingOfGenderColumnValues"
						}
					],
					"udfLibraries": [
						{
							"referenceName": "GenderMappingFunction",
							"type": "DataFlowReference"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string,",
						"          Salary as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employee",
						"employee derive(gender = GenderToIntegerFunction(gender)) ~> MappingOfGenderColumnValues",
						"MappingOfGenderColumnValues sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmployeeWithGenderIntegerMapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          empid,",
						"          empName,",
						"          gender,",
						"          location,",
						"          department,",
						"          Salary",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowUsingFlowlet')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "WindowDataSet",
								"type": "DatasetReference"
							},
							"name": "employeesWithDuplicateRows"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "sinkOfEmployees"
						}
					],
					"transformations": [
						{
							"name": "flowlet1",
							"flowlet": {
								"referenceName": "flowletForRemovingDuplicates",
								"type": "DataFlowReference",
								"parameters": {}
							}
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string,",
						"          Salary as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employeesWithDuplicateRows",
						"employeesWithDuplicateRows compose(mapColumn(",
						"          empName,",
						"          gender,",
						"          department",
						"     ),",
						"     composition: 'flowletForRemovingDuplicates') ~> flowlet1@(outputofFlowlet)",
						"flowlet1@outputofFlowlet sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmployeesFlowlet.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          empId,",
						"          empName,",
						"          gender,",
						"          department",
						"     ),",
						"     partitionBy('hash', 1)) ~> sinkOfEmployees"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowValidateSchemaAndSchemaDrift')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "biologyDataSet",
								"type": "DatasetReference"
							},
							"name": "sourceValidateSchema"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          empid as boolean,",
						"          empName as string,",
						"          location as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     preferredIntegralType: 'integer') ~> sourceValidateSchema",
						"sourceValidateSchema sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['validation.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          empid,",
						"          empName,",
						"          location,",
						"          department",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowWindowTransform')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "WindowDataSet",
								"type": "DatasetReference"
							},
							"name": "sourceMultipleEmployees"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedTextOutput",
								"type": "DatasetReference"
							},
							"name": "sinkEmpWindow"
						}
					],
					"transformations": [
						{
							"name": "window1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as short,",
						"          empName as string,",
						"          gender as string,",
						"          location as string,",
						"          department as string,",
						"          Salary as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceMultipleEmployees",
						"sourceMultipleEmployees window(over(department),",
						"     asc(Salary, true),",
						"     AvgSalary = avg(Salary),",
						"          Rank = denseRank()) ~> window1",
						"window1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['sinkEmpWindow.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkEmpWindow"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/powerqueryTableUpdate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "DataFlowSourceEmployee",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> DataFlowSourceEmployee",
							"dataset": {
								"referenceName": "DataFlowSourceEmployee",
								"type": "DatasetReference"
							}
						}
					],
					"script": "section Section1;\r\nshared DataFlowSourceEmployee = let AdfDoc = AzureStorage.BlobContents(\"https://test1resourcegrp.blob.core.windows.net/test1containerrg/input/employee.csv\"),Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]), PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true]) in  PromotedHeaders;\r\nshared UserQuery = let Source = #\"DataFlowSourceEmployee\" in Source;\r\n",
					"documentLocale": "en-us"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1variables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FileName",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "FileName",
							"value": {
								"value": "@replace(pipeline().parameters.FileName,'Sales','')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If FileType is Hourly",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "FileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('FileName'),'Hourly')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy data to Daily Table",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SqlServerSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DataSetSQl",
											"type": "DatasetReference",
											"parameters": {
												"tableName": "tableNameSource",
												"serverNamefromDataset": "serverName",
												"dbNamefromDataset": "dbName",
												"UserNamefromDataset": "User",
												"passwordfromDataset": "Pass"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DataSetSQl",
											"type": "DatasetReference",
											"parameters": {
												"tableName": "tableNameDest",
												"serverNamefromDataset": "serverName",
												"dbNamefromDataset": "dbName",
												"UserNamefromDataset": "User",
												"passwordfromDataset": "Pass"
											}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy data to Hourly Table",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SqlServerSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DataSetSQl",
											"type": "DatasetReference",
											"parameters": {
												"tableName": "tableNameSource",
												"serverNamefromDataset": "serverName",
												"dbNamefromDataset": "dbName",
												"UserNamefromDataset": "User",
												"passwordfromDataset": "Pass"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DataSetSQl",
											"type": "DatasetReference",
											"parameters": {
												"tableName": "tableNameDest",
												"serverNamefromDataset": "serverName",
												"dbNamefromDataset": "dbName",
												"UserNamefromDataset": "User",
												"passwordfromDataset": "Pass"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"variables": {
					"FileName": {
						"type": "String"
					},
					"ListOfFiles": {
						"type": "Array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-29T15:46:50Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineCacheSink')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowCacheSink",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employees": {},
									"Employee": {},
									"MaxCountofEmpId": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		}
	]
}