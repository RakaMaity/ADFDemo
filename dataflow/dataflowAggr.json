{
	"name": "dataflowAggr",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DataFlowSourceEmployee",
						"type": "DatasetReference"
					},
					"name": "employee"
				},
				{
					"dataset": {
						"referenceName": "DataFlowSourceDepartment",
						"type": "DatasetReference"
					},
					"name": "department"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimitedTextOutput",
						"type": "DatasetReference"
					},
					"name": "TotalEmpBasedOnDeptwithRole",
					"rejectedDataLinkedService": {
						"referenceName": "LinkedServiceTest1",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "aggregate1"
				},
				{
					"name": "join1Aggr1AndDeptRole"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empid as string,",
				"          empName as string,",
				"          gender as string,",
				"          location as string,",
				"          department as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> employee",
				"source(output(",
				"          department as string,",
				"          role as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> department",
				"employee aggregate(groupBy(department),",
				"     TotalEmployees = count(department),",
				"     partitionBy('hash', 1)) ~> aggregate1",
				"aggregate1, department join(aggregate1@department == department@department,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1Aggr1AndDeptRole",
				"join1Aggr1AndDeptRole sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['EmpOnDeptwithRole.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          department = aggregate1@department,",
				"          TotalEmployees,",
				"          role",
				"     ),",
				"     partitionBy('hash', 1)) ~> TotalEmpBasedOnDeptwithRole"
			]
		}
	}
}